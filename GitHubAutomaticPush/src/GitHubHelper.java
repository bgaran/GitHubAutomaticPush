import java.io.File;
import java.util.Collection;

import org.eclipse.jgit.api.CommitCommand;
import org.eclipse.jgit.api.CreateBranchCommand;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.PushCommand;
import org.eclipse.jgit.api.errors.AbortedByHookException;
import org.eclipse.jgit.api.errors.ConcurrentRefUpdateException;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.api.errors.InvalidRemoteException;
import org.eclipse.jgit.api.errors.NoHeadException;
import org.eclipse.jgit.api.errors.NoMessageException;
import org.eclipse.jgit.api.errors.ServiceUnavailableException;
import org.eclipse.jgit.api.errors.TransportException;
import org.eclipse.jgit.api.errors.UnmergedPathsException;
import org.eclipse.jgit.api.errors.WrongRepositoryStateException;
import org.eclipse.jgit.internal.storage.file.FileRepository;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;

public class GitHubHelper {

	Git git;
	UsernamePasswordCredentialsProvider credentials;
	//Repository repo;
	/**
	 * This method connects to GitHub with the given user name and password
	 * @param username - GitHub User Name (String)
	 * @param password - GitHub Password (String)
	 */
	public String ConnectToGitHub(String username, String password, String filePath)
	{
		//testing creating a new branch in the repo to see if we are accurately connecting to the repo
		//will not be necessary later on
		try(Repository repo = new FileRepository(filePath)) {
			String branchName = "testBranchCreate";
			git = new Git(repo);
			git.branchCreate()
				.setName(branchName)
				.setStartPoint("origin/"+branchName)
				.call();
			git.push()
				.call();
					
		}
		catch (Exception ex) {
			ex.printStackTrace();
		}
		
		return "";
		/*
		File repoPath = new File("../testcloning");	//eventually will need to be either passed in or autogenerated somehow
		
		if(repoPath.exists()) {
			//want to pull latest version here, I think. Not sure how to pull without it knowing what repository to pull from
			return "directory is already created";
		}
		else {
			String message = "could not clone the repository";
			try {
				git.cloneRepository()
					.setURI(filePath)
					.setDirectory(repoPath)
					.call();
				
				message = "successfully cloned the repository";
			} catch (InvalidRemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (TransportException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (GitAPIException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return message;
		}
		
		/*
		credentials=new UsernamePasswordCredentialsProvider(username,password);
		Path repoPath = Paths.get(filePath);
		String message="Successfully Connected to Github!";
		try{
			git=Git.open(repoPath.toFile());
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			message="Failed to Connect to GitHub: "+e1.getMessage();
		}
		return message;
		*/
	}
	
	/**
	 * This method saves the current progress and
	 * pushes the current project to the connected GitHub repository
	 */
	public void githubPush()
	{
		CommitCommand commit=git.commit();
		commit.setCredentialsProvider(credentials);
		commit.setMessage("Auto Commit");
		try {
			commit.call();
		} catch (AbortedByHookException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ConcurrentRefUpdateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoHeadException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoMessageException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ServiceUnavailableException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnmergedPathsException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (WrongRepositoryStateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (GitAPIException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
